{"version":3,"sources":["Img.js","fetch.js","serviceWorker.js","index.js"],"names":["Image","props","src","this","alt","React","Component","App1","getSrc","setState","state","data","fetch","response","json","nData","i","length","push","console","log","map","item","index","key","onClick","url","id","className","style","border","borderRadius","height","alignItemn","padding","margin","display","justify","position","left","top","transform","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAaiBA,E,YAVb,WAAYC,GAAQ,qEACVA,I,sEAGR,OAAO,6BACH,wCACA,yBAAKC,IAAKC,KAAKF,MAAMC,IAAKE,IAAI,a,GAPpBC,IAAMC,WC8DXC,E,YA5DX,WAAYN,GAAO,IAAD,8BAChB,4CAAMA,KAoBZO,OAAQ,SAACN,GACL,EAAKO,SAAS,CAACP,IAAIA,KAnBjB,EAAKQ,MAAQ,CACTC,KAAK,GACLT,IAAI,IALQ,E,6MASF,8C,SACWU,MADX,+C,cACNC,E,gBACaA,EAASC,O,OAE5B,IAFMH,E,OACAI,EAAQ,GACNC,EAAI,EAAGA,EAAI,IAAMA,EAAIL,EAAKM,OAAQD,IAC1CD,EAAMG,KAAKP,EAAKK,IAEhBb,KAAKM,SAAS,CAACE,KAAKI,IACpBI,QAAQC,IAAIL,G,sIAUV,IAAD,OACL,OACA,6BACI,gDACC,4BACEZ,KAAKO,MAAMC,KAAKU,KAAI,SAACC,EAAKC,GACzB,OACA,wBAAIC,IAAOD,GACP,+BAAO,uBAAIE,QAAU,kBAAI,EAAKjB,OAAOc,EAAKI,OACpCJ,EAAKK,SAMnB,yBAAKC,UAAY,QAAQC,MAAS,CAACC,OAAQ,EAC/BC,aAAc,EACdC,OAAQ,GACRC,WAAY,SACZC,QAAS,SACTC,OAAQ,OACRC,QAAQ,OACRC,QAAQ,SACRC,SAAU,WACVC,KAAM,MACNC,IAAK,KACLC,UAAW,0BAA8C,KAAnBtC,KAAKO,MAAMR,IAAY,kBAAC,EAAD,CAAOA,IAAOC,KAAKO,MAAMR,MAAO,KAXzG,W,GA3CWI,aCSCoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9257dfb1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Image extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n    render() {\r\n      return <div>\r\n          <h3>Hi there</h3>\r\n          <img src={this.props.src} alt=\"dfd\"/>\r\n       </div>;\r\n    }\r\n  }\r\n  export default Image;","import React, { Component } from 'react';\r\nimport Image from './Img';\r\n\r\nclass App1 extends Component{\r\n    constructor(props){\r\n      super(props);\r\n  \r\n      this.state = {\r\n          data:[],\r\n          src:\"\",\r\n      }\r\n    }\r\n    async componentDidMount(){\r\n        const url = \"https://jsonplaceholder.typicode.com/photos\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const nData = [];\r\n        for(let i = 0; i < 10 && i < data.length; i++){\r\n        nData.push(data[i]);\r\n        }\r\n        this.setState({data:nData})\r\n        console.log(nData);\r\n    }\r\n\r\n\r\ngetSrc= (src) =>{\r\n    this.setState({src:src})\r\n\r\n}\r\n\r\n\r\nrender (){\r\n    return (\r\n    <div>\r\n        <header> Hello world</header>\r\n         <ul>\r\n          {this.state.data.map((item,index) =>{\r\n            return (\r\n            <li key = {index}>\r\n                <aside><a  onClick= {()=>this.getSrc(item.url)} > \r\n                    { item.id}\r\n                </a></aside>\r\n                \r\n            </li>\r\n            )\r\n          })}\r\n        <div className = \"image\" style = {{border: 0,\r\n                    borderRadius: 3,\r\n                    height: 20,\r\n                    alignItemn: 'center',\r\n                    padding: '0 30px',\r\n                    margin: \"auto\",\r\n                    display:\"flex\",\r\n                    justify:'center',\r\n                    position: 'absolute', \r\n                    left: '60%', \r\n                    top: '0%',\r\n                    transform: 'translate(-50%, -30%)'}}>{this.state.src !== \"\"? <Image src = {this.state.src}/>:null} </div> \r\n        </ul>\r\n         \r\n    </div>\r\n         )\r\n        }\r\n}\r\nexport default App1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// async fetchUsers(){\r\n    \r\n//         const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n//         const data = await res.json();\r\n//         const names = data.map(item=>item.name);\r\n//         this.setState ({names: names});\r\n// }\r\n// componentDidMount(){\r\n//         fetch(\"https://jsonplaceholder.typicode.com/photos\")\r\n//           .then(res => res.json())\r\n//           .then(data => this.setState({ data: data }));\r\n// }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App1 from './fetch.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App1 />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}